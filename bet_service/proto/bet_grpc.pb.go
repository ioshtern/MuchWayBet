// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/bet.proto

package betpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BetService_CreateBet_FullMethodName       = "/bet.BetService/CreateBet"
	BetService_GetBetByID_FullMethodName      = "/bet.BetService/GetBetByID"
	BetService_GetBetsByUserID_FullMethodName = "/bet.BetService/GetBetsByUserID"
	BetService_UpdateBet_FullMethodName       = "/bet.BetService/UpdateBet"
	BetService_DeleteBet_FullMethodName       = "/bet.BetService/DeleteBet"
)

// BetServiceClient is the client API for BetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BetServiceClient interface {
	CreateBet(ctx context.Context, in *CreateBetRequest, opts ...grpc.CallOption) (*CreateBetResponse, error)
	GetBetByID(ctx context.Context, in *GetBetByIDRequest, opts ...grpc.CallOption) (*GetBetByIDResponse, error)
	GetBetsByUserID(ctx context.Context, in *GetBetsByUserIDRequest, opts ...grpc.CallOption) (*GetBetsByUserIDResponse, error)
	UpdateBet(ctx context.Context, in *UpdateBetRequest, opts ...grpc.CallOption) (*UpdateBetResponse, error)
	DeleteBet(ctx context.Context, in *DeleteBetRequest, opts ...grpc.CallOption) (*DeleteBetResponse, error)
}

type betServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBetServiceClient(cc grpc.ClientConnInterface) BetServiceClient {
	return &betServiceClient{cc}
}

func (c *betServiceClient) CreateBet(ctx context.Context, in *CreateBetRequest, opts ...grpc.CallOption) (*CreateBetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBetResponse)
	err := c.cc.Invoke(ctx, BetService_CreateBet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *betServiceClient) GetBetByID(ctx context.Context, in *GetBetByIDRequest, opts ...grpc.CallOption) (*GetBetByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBetByIDResponse)
	err := c.cc.Invoke(ctx, BetService_GetBetByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *betServiceClient) GetBetsByUserID(ctx context.Context, in *GetBetsByUserIDRequest, opts ...grpc.CallOption) (*GetBetsByUserIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBetsByUserIDResponse)
	err := c.cc.Invoke(ctx, BetService_GetBetsByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *betServiceClient) UpdateBet(ctx context.Context, in *UpdateBetRequest, opts ...grpc.CallOption) (*UpdateBetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBetResponse)
	err := c.cc.Invoke(ctx, BetService_UpdateBet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *betServiceClient) DeleteBet(ctx context.Context, in *DeleteBetRequest, opts ...grpc.CallOption) (*DeleteBetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBetResponse)
	err := c.cc.Invoke(ctx, BetService_DeleteBet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BetServiceServer is the server API for BetService service.
// All implementations must embed UnimplementedBetServiceServer
// for forward compatibility.
type BetServiceServer interface {
	CreateBet(context.Context, *CreateBetRequest) (*CreateBetResponse, error)
	GetBetByID(context.Context, *GetBetByIDRequest) (*GetBetByIDResponse, error)
	GetBetsByUserID(context.Context, *GetBetsByUserIDRequest) (*GetBetsByUserIDResponse, error)
	UpdateBet(context.Context, *UpdateBetRequest) (*UpdateBetResponse, error)
	DeleteBet(context.Context, *DeleteBetRequest) (*DeleteBetResponse, error)
	mustEmbedUnimplementedBetServiceServer()
}

// UnimplementedBetServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBetServiceServer struct{}

func (UnimplementedBetServiceServer) CreateBet(context.Context, *CreateBetRequest) (*CreateBetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBet not implemented")
}
func (UnimplementedBetServiceServer) GetBetByID(context.Context, *GetBetByIDRequest) (*GetBetByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBetByID not implemented")
}
func (UnimplementedBetServiceServer) GetBetsByUserID(context.Context, *GetBetsByUserIDRequest) (*GetBetsByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBetsByUserID not implemented")
}
func (UnimplementedBetServiceServer) UpdateBet(context.Context, *UpdateBetRequest) (*UpdateBetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBet not implemented")
}
func (UnimplementedBetServiceServer) DeleteBet(context.Context, *DeleteBetRequest) (*DeleteBetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBet not implemented")
}
func (UnimplementedBetServiceServer) mustEmbedUnimplementedBetServiceServer() {}
func (UnimplementedBetServiceServer) testEmbeddedByValue()                    {}

// UnsafeBetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BetServiceServer will
// result in compilation errors.
type UnsafeBetServiceServer interface {
	mustEmbedUnimplementedBetServiceServer()
}

func RegisterBetServiceServer(s grpc.ServiceRegistrar, srv BetServiceServer) {
	// If the following call pancis, it indicates UnimplementedBetServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BetService_ServiceDesc, srv)
}

func _BetService_CreateBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BetServiceServer).CreateBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BetService_CreateBet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BetServiceServer).CreateBet(ctx, req.(*CreateBetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BetService_GetBetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BetServiceServer).GetBetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BetService_GetBetByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BetServiceServer).GetBetByID(ctx, req.(*GetBetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BetService_GetBetsByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBetsByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BetServiceServer).GetBetsByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BetService_GetBetsByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BetServiceServer).GetBetsByUserID(ctx, req.(*GetBetsByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BetService_UpdateBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BetServiceServer).UpdateBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BetService_UpdateBet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BetServiceServer).UpdateBet(ctx, req.(*UpdateBetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BetService_DeleteBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BetServiceServer).DeleteBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BetService_DeleteBet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BetServiceServer).DeleteBet(ctx, req.(*DeleteBetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BetService_ServiceDesc is the grpc.ServiceDesc for BetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bet.BetService",
	HandlerType: (*BetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBet",
			Handler:    _BetService_CreateBet_Handler,
		},
		{
			MethodName: "GetBetByID",
			Handler:    _BetService_GetBetByID_Handler,
		},
		{
			MethodName: "GetBetsByUserID",
			Handler:    _BetService_GetBetsByUserID_Handler,
		},
		{
			MethodName: "UpdateBet",
			Handler:    _BetService_UpdateBet_Handler,
		},
		{
			MethodName: "DeleteBet",
			Handler:    _BetService_DeleteBet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bet.proto",
}
